<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        JEmS1BT/DyXhrlVtPXo8AAAAAElFTkSuQmCC
</value>
  </data>
</root>